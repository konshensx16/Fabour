# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'
    attachments_dir: '%kernel.project_dir%/public/uploads/attachments'
    avatars_dir: '%kernel.project_dir%/public/uploads/avatars'
    attachments_dir_no_root: '/uploads/attachments'
    avatars_dir_no_root: '/uploads/avatars'
    post_type_id: 1
    comment_type_id: 2
    bookmark_type_id: 3
    friendrequest_type_id: 4
    friendapproval_type_id: 5
    hash_salt: 'konshensx'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    App\Listeners\PostListener:
        tags:
            - { name: doctrine.orm.entity_listener }

    App\Listeners\CommentListener:
        tags:
            - { name: doctrine.orm.entity_listener }

    App\Controller\PostController:
        arguments:
            - '@gos_web_socket.wamp.topic_manager'
            - '@gos_web_socket.amqp.pusher'

    App\Controller\MessagingController:
        arguments:
            - '@twig.extension.date'
    App\Services\DateManager:
        arguments:
            - '@twig.extension.date'
    App\Services\NotificationManager:
        arguments:
            - '@gos_web_socket.amqp.pusher'

    App\Controller\HomeController:
        arguments:
            - '@gos_web_socket.amqp.pusher'

    App\Controller\FriendsController:
        arguments:
            - '@gos_web_socket.amqp.pusher'

    # i might create a seperate file for services if this one gets large enough to confuse me
    # i think all these definitions could be moved to a separate file!
    comment_topic.topic_service:
        class: App\Topic\CommentTopic
        arguments:
            - '@gos_web_socket.websocket.client_manipulator'
        tags:
            - { name: gos_web_socket.topic }

    App\Topic\FriendshipTopic:
        arguments:
            - '@gos_web_socket.websocket.client_manipulator'
        tags:
            - { name: gos_web_socket.topic }

    App\Topic\NotificationTopic:
        arguments:
            - '@gos_web_socket.websocket.client_manipulator'
        tags:
            - { name: gos_web_socket.topic }

    App\Topic\PublicationsTopic:
        arguments:
            - '@gos_web_socket.websocket.client_manipulator'
        tags:
            - { name: gos_web_socket.topic }

    App\Topic\MessageTopic:
        arguments:
            - '@gos_web_socket.websocket.client_manipulator'
        tags:
            - { name: gos_web_socket.topic }

    conversation.topic_service:
        class: App\Topic\ConversationTopic
        arguments:
          - '@gos_web_socket.websocket.client_manipulator'
        tags:
            - { name: gos_web_socket.topic }

    gos_web_socket_server.client_event.listener:
        class: App\Listeners\AcmeClientEventListener
        arguments:
            - '@gos_web_socket.client_storage'
            - '@gos_web_socket.websocket_authentification.provider'
        tags:
             - { name: kernel.event_listener, event: 'gos_web_socket.client_connected', method: onClientConnect }
             - { name: kernel.event_listener, event: 'gos_web_socket.client_disconnected', method: onClientDisconnect }
             - { name: kernel.event_listener, event: 'gos_web_socket.client_error', method: onClientError }
             - { name: kernel.event_listener, event: 'gos_web_socket.server_launched', method: onServerStart }
             - { name: kernel.event_listener, event: 'gos_web_socket.client_rejected', method: onClientRejected }

    acme_hello.rpc_sample_service:
        class: App\RPC\AcmeService
        tags:
            - { name: gos_web_socket.rpc}

    messages_manager.rpc_service:
        class: App\RPC\MessagesManagerRPC
        arguments:
            - '@form.factory'
        tags:
            - { name: gos_web_socket.rpc }


    comment_manager.rpc_service:
        class: App\RPC\CommentRPC
        arguments:
            - '@gos_web_socket.websocket.client_manipulator'
        tags:
            - { name: gos_web_socket.rpc }

    # end of thinking
    pdo:
        class: PDO
        arguments:
            - 'mysql:host=127.0.0.1;port=3306;dbname=websockets'
            - 'root'
            - '000000'
        calls:
            - [ setAttribute, [3, 2] ] # \PDO::ATTR_ERRMODE, \PDO::ERRMODE_EXCEPTION

    session.handler.pdo:
        class:     Symfony\Component\HttpFoundation\Session\Storage\Handler\PdoSessionHandler
        arguments: ['@pdo', {lock_mode: 0}]

    gos_web_socket.client_storage.driver.predis:
        class: 'Gos\Bundle\WebSocketBundle\Client\Driver\PredisDriver'
        arguments:
            - '@snc_redis.client_storage.driver'
#            - '%web_socket_server.client_storage.prefix%' #(optionally)if you use prefix
#
#    gos_web_scocket.client_storage.driver.predis:
#        class: Gos\Bundle\WebSocketBundle\Client\Driver\PredisDriver
#        arguments:
#            - '@snc_redis.cache'
#            - '%web_socket_server.client_storage.prefix%' #(optionally)if you use prefix (not sure if i need this, don't know which prefix is he talking about)
#
#
#    Redis: '@snc_redis.default'rver.client_storage.prefix%' #(optionally)if you use prefix



    twig.extension.date:
        class: Twig_Extensions_Extension_Date
        arguments:
            - '@translator'
        tags:
            - { name: twig.extension }

    # listeners
    App\Listeners\MessageListener:
        tags:
            - { name: doctrine.orm.entity_listener }

    my.oauth_aware.user_provider.service:
        class: App\Security\MyEntityUserProvider
        arguments:
            - '@doctrine'
            - 'App\Entity\User'
            - {facebook: facebookID, google: googleID} # twitter was removed, just add it here when neede